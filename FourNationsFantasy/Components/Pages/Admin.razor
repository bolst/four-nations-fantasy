@page "/admin"

@inject Data.IFNFData FNFData
@inject Data.CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject Data.CustomUserService CustomUserService
@inject NavigationManager Navigation

<PageTitle>Admin</PageTitle>

<AuthorizeView Roles="admin">
    <MudTabs Centered>
        <MudTabPanel Text="Masquerade">
            @if (users is not null)
            {
                <MudDataGrid T="Data.User" Items="users" RowClick="OnRowClick" SelectedItemChanged="OnItemSelect" Hover="true" Elevation="0">
                    <Columns>
                        <PropertyColumn Property=@(x => $"{x.FirstName} {x.LastName}") Title="Name"/>
                        <PropertyColumn Property="x => x.Email" Title="Email"/>
                        <PropertyColumn Property="x => x.TeamName" Title="Team"/>
                    </Columns>
                </MudDataGrid>
            }

            @if (selectedUser is not null)
            {
                <MudOverlay @bind-Visible="@overlayVisible" ZIndex="9999" DarkBackground AutoClose>
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Masquerade as</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Row="true" Wrap="Wrap.Wrap" Justify="Justify.SpaceAround" AlignItems="AlignItems.Center">
                                <MudText>@selectedUser.FirstName @selectedUser.LastName (@selectedUser.TeamName)</MudText>
                                <MudButton OnClick="OnMasqueradeClick" Color="Color.Success" Variant="Variant.Filled">Masquerade</MudButton>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudOverlay>
            }
        </MudTabPanel>
        <MudTabPanel Text="Controls">
            <MudPaper Class="px-2 py-8" Elevation="0">
                
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    @if (simDraftConfirmed)
                    {
                        <MudButton Class="justify-start" StartIcon="@Icons.Material.Filled.Shuffle" IconColor="Color.Success" OnClick="OnSimDraft" FullWidth>
                            @if (simDraftLoading)
                            {
                                <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                            }
                            else
                            {
                                <MudText Typo="Typo.button">Confirm Draft Sim</MudText>
                            }
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Class="justify-start" StartIcon="@Icons.Material.Filled.Shuffle" IconColor="Color.Info" OnClick=@( () => simDraftConfirmed = true ) FullWidth>Simulate Draft</MudButton>
                    }
                </MudStack>              
                
                <br />
                
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    @if (resetRostersConfirmed)
                    {
                        <MudButton Class="justify-start" StartIcon="@Icons.Material.Filled.ClearAll" IconColor="Color.Success" OnClick="OnResetRosters" FullWidth>
                            @if (resetRostersLoading)
                            {
                                <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                            }
                            else
                            {
                                <MudText Typo="Typo.button">Confirm Reset</MudText>
                            }
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Class="justify-start" StartIcon="@Icons.Material.Filled.ClearAll" IconColor="Color.Error" OnClick=@( () => resetRostersConfirmed = true ) FullWidth>Reset Rosters</MudButton>
                    }
                </MudStack>

            </MudPaper>
        </MudTabPanel>
    </MudTabs>
</AuthorizeView>

@code{
    private IEnumerable<Data.User>? users;
    private Data.User? selectedUser;
    private bool overlayVisible = false;
    private bool simDraftLoading = false;
    private bool simDraftConfirmed = false;
    private bool resetRostersLoading = false;
    private bool resetRostersConfirmed = false;
    
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CustomAuthenticationStateProvider.CurrentUser.Email) || !CustomAuthenticationStateProvider.CurrentUser.IsAdmin)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            users = await FNFData.GetAllUsersAsync();
        }
    }

    private async Task OnRowClick(DataGridRowClickEventArgs<Data.User> args)
    {
        Data.User user = args.Item;
        await OnItemSelect(user);
    }

    private async Task OnItemSelect(Data.User user)
    {
        selectedUser = user;
        overlayVisible = true;
    }

    private async Task OnMasqueradeClick()
    {
        if (selectedUser is not null)
        {
            await CustomUserService.BeginMasquerade(selectedUser);
            Navigation.NavigateTo("/", true);
        }
    }

    private async Task OnSimDraft()
    {
        if (simDraftConfirmed)
        {
            simDraftLoading = true;
            
            await FNFData.SimulateDraft();
            Navigation.NavigateTo("/home");
            
            simDraftLoading = false;
        }
    }

    private async Task OnResetRosters()
    {
        if (resetRostersConfirmed)
        {
            resetRostersLoading = true;
            
            await FNFData.ResetRosters();
            Navigation.NavigateTo("/home");

            resetRostersLoading = false;
        }
    }
}