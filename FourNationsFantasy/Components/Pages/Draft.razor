@page "/draft"
@inject Data.IFNFData FNFData
@inject Nhl.Api.INhlApi NhlApi

<MudPaper Class="pa-4 my-2">
    @if (filteredPlayers is not null)
    {
        <MudTabs Centered>
            <MudTabPanel Text="Available Players">
                
                <br />
                
                <MudTextField @bind-Value="_searchString" Placeholder="Search players..." Adornment="Adornment.Start"
                              Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>

                <MudChipSet Class="my-4" T="string" @bind-SelectedValue="_selectedPositionFilter" SelectionMode="SelectionMode.SingleSelection">
                    <MudChip Text="All" Color="Color.Primary" Variant="Variant.Text" Value=@("All")>All</MudChip>
                    <MudChip Text="F" Color="Color.Primary" Variant="Variant.Text" Value=@("F")>F</MudChip>
                    <MudChip Text="D" Color="Color.Primary" Variant="Variant.Text" Value=@("D")>D</MudChip>
                    <MudChip Text="G" Color="Color.Primary" Variant="Variant.Text" Value=@("G")>G</MudChip>
                </MudChipSet>

                <MudChipSet Class="my-4" T="string" @bind-SelectedValue="_selectedNationality" SelectionMode="SelectionMode.SingleSelection">
                    <MudChip Color="Color.Primary" Variant="Variant.Text" Value=@("All")>üåç</MudChip>
                    <MudChip Color="Color.Error" Variant="Variant.Text" Value=@("CAN")>üá®üá¶</MudChip>
                    <MudChip Color="Color.Info" Variant="Variant.Text" Value=@("USA")>üá∫üá∏</MudChip>
                    <MudChip Color="Color.Warning" Variant="Variant.Text" Value=@("SWE")>üá∏üá™</MudChip>
                    <MudChip Color="Color.Surface" Variant="Variant.Text" Value=@("FIN")>üá´üáÆ</MudChip>
                </MudChipSet>

                @foreach (var player in filteredPlayers.Where(x => allAvailablePlayers.Contains(x)))
                {
                    <MudStack Class="my-2" Row="true" AlignItems="AlignItems.Center">
                        @if (playerToConfirm is not null && playerToConfirm.Equals(player))
                        {
                            <MudButton OnClick="() => ConfirmDraft(player)" Color="Color.Success" Variant="Variant.Filled">Confirm</MudButton>
                        }
                        else
                        {
                            <MudButton OnClick="() => InitiateDraft(player)" Color="Color.Primary" Variant="Variant.Filled">Draft</MudButton>
                        }

                        <MudStack @onclick=@(() => RowClicked(player))>
                            <MudText><b>@($"{player.FirstName} {player.LastName}")</b></MudText>
                            <MudText Typo="Typo.body2">@player.FullPosition &nbsp; @player.Flag</MudText>
                        </MudStack>
                    </MudStack>

                    <MudDivider/>
                }
            </MudTabPanel>
            <MudTabPanel Text="Draft Board">
                
                <br />
                
                <MudPaper Class="pa-2" Style="background-color: var(--mud-palette-background-grey);">
                    <MudGrid>
                        @foreach (var player in filteredPlayers.Where(x => !allAvailablePlayers.Contains(x)).OrderBy(x => x.DraftNumber))
                        {
                            <MudItem xs="6" Class="pa-1">
                                <MudPaper Class=@($"{PlayerCardClass(player.Position)} pa-1") Height="90px" @onclick=@(() => RowClicked(player))>
                                    <div class="d-flex justify-space-between align-center">
                                        <MudText Typo="Typo.caption">@player.Position - @teams.Where(x => x.Id == player.UserId).FirstOrDefault().TeamName</MudText>
                                        <MudText Typo="Typo.caption">@player.DraftNumber</MudText>
                                    </div>
                                    <MudText Typo="Typo.body1"><b>@($"{player.FirstName} {player.LastName}")</b></MudText>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudPaper>
            </MudTabPanel>
        </MudTabs>
    }
</MudPaper>

@if (overlayPlayerInfo is not null)
{
    <PlayerOverlay @bind-Visible="_playerOverlayVisible" PlayerInfo="overlayPlayerInfo" />
}

@code {
    private IEnumerable<Data.FNFPlayer> allPlayers;
    private IEnumerable<Data.FNFPlayer> allAvailablePlayers;
    private IEnumerable<Data.FNFPlayer> filteredPlayers;
    
    private IEnumerable<Data.User> teams;

    private bool _playerOverlayVisible
    {
        get => playerOverlayVisible;
        set
        {
            playerOverlayVisible = value;
            if (!playerOverlayVisible)
            {
                overlayPlayer = null;
                overlayPlayerInfo = null;
            }
        }
    }
    private bool playerOverlayVisible = false;
    private Data.FNFPlayer? overlayPlayer;
    private Nhl.Api.Models.Player.PlayerProfile? overlayPlayerInfo;

    private string _selectedNationality
    {
        get => selectedNationality;
        set
        {
            selectedNationality = value;
            ApplyFilters();
        }
    }
    private string selectedNationality = "All";
    
    private string _selectedPositionFilter
    {
        get => selectedPositionFilter;
        set
        {
            selectedPositionFilter = value;
            ApplyFilters();
        }
    }
    private string selectedPositionFilter = "All";
    
    private string searchString;
    private string _searchString
    {
        get => searchString;
        set
        {
            searchString = value;
            ApplyFilters();
        }
    }

    private Data.FNFPlayer? playerToConfirm;
    
    protected override async Task OnInitializedAsync()
    {
        allPlayers = await FNFData.GetAllPlayersAsync();
        filteredPlayers = allPlayers;
        
        allAvailablePlayers = await FNFData.GetDraftAvailablePlayersAsync();
        teams = await FNFData.GetAllUsersAsync();
    }

    private void InitiateDraft(Data.FNFPlayer player)
    {
        playerToConfirm = player;
    }

    private async Task ConfirmDraft(Data.FNFPlayer player)
    {
        // TODO: Implement draft logic
        
        Console.WriteLine("CONFIRMED YEAHHHHHHHHHH");
        Console.WriteLine(player.FirstName + " " + player.LastName);

        

        playerToConfirm = null;
    }

    private async Task RowClicked(Data.FNFPlayer player)
    {
        playerOverlayVisible = true;
        overlayPlayer = player;
        overlayPlayerInfo = await NhlApi.GetPlayerInformationAsync(player.NhlIdInt);
    }

    private Func<Data.FNFPlayer, bool> quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void ApplyFilters()
    {
        filteredPlayers = allPlayers;
        
        if (selectedPositionFilter != "All")
        {
            filteredPlayers = filteredPlayers.Where(p => p.Position == selectedPositionFilter);
        }
        
        if (selectedNationality != "All")
        {
            filteredPlayers = filteredPlayers.Where(p => p.Nationality == selectedNationality);
        }
        
        filteredPlayers = filteredPlayers.Where(quickFilter);
    }

    private string PlayerCardClass(string position)
    {
        return position switch
        {
            "F" => "mud-theme-primary",
            "D" => "mud-theme-secondary",
            "G" => "mud-theme-tertiary",
            _ => "mud-theme-info"
        };
    }

    private bool IsForwardOrDefense(string position) => position is "F" or "D";
}

