@page "/draft"

@using Microsoft.AspNetCore.SignalR.Client
@inject Data.IFNFData FNFData
@inject Data.CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject Data.ScoreCalculationService ScoreCalculator
@inject NavigationManager Navigation

<PageTitle>Draft</PageTitle>

@if (currentUserPick is not null && currentPick != 0)
{
    <MudStack Class="mb-4" Row="true" Justify="Justify.Center">
        <MudStack AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">Pick @currentPick</MudText>
            <MudText Typo="Typo.h6" Color=@(isCurrentPick ? Color.Primary : Color.Default)>@currentUserPick.TeamName</MudText>
        </MudStack>
    </MudStack>
}

<MudPaper Class="my-2" Elevation="3">
    @if (filteredPlayers is not null)
    {
        <MudTabs PanelClass="pa-4" Centered>
            <MudTabPanel Text="Available Players">
                
                <br />
                
                <MudTextField @bind-Value="_searchString" Placeholder="Search players..." Adornment="Adornment.Start"
                              Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>

                <MudChipSet Class="my-4" T="string" @bind-SelectedValue="_selectedPositionFilter" SelectionMode="SelectionMode.SingleSelection">
                    <MudChip Text="All" Color="Color.Primary" Variant="Variant.Text" Value=@("All")>All</MudChip>
                    <MudChip Text="F" Color="Color.Primary" Variant="Variant.Text" Value=@("F")>F</MudChip>
                    <MudChip Text="D" Color="Color.Primary" Variant="Variant.Text" Value=@("D")>D</MudChip>
                    <MudChip Text="G" Color="Color.Primary" Variant="Variant.Text" Value=@("G")>G</MudChip>
                </MudChipSet>

                <MudChipSet Class="my-4" T="string" @bind-SelectedValue="_selectedNationality" SelectionMode="SelectionMode.SingleSelection">
                    <MudChip Color="Color.Primary" Variant="Variant.Text" Value=@("All")>üåç</MudChip>
                    <MudChip Color="Color.Error" Variant="Variant.Text" Value=@("CAN")>üá®üá¶</MudChip>
                    <MudChip Color="Color.Info" Variant="Variant.Text" Value=@("USA")>üá∫üá∏</MudChip>
                    <MudChip Color="Color.Warning" Variant="Variant.Text" Value=@("SWE")>üá∏üá™</MudChip>
                    <MudChip Color="Color.Surface" Variant="Variant.Text" Value=@("FIN")>üá´üáÆ</MudChip>
                </MudChipSet>
                
                <MudStack Class="my-4" Row="true" AlignItems="AlignItems.Center">
                    <MudText>Sort by</MudText>
                    <MudChipSet T="string" @bind-SelectedValue="_selectedSortKey" SelectionMode="SelectionMode.SingleSelection">
                        <MudChip Color="Color.Primary" Variant="Variant.Text" Value=@("G")>G</MudChip>
                        <MudChip Color="Color.Primary" Variant="Variant.Text" Value=@("A")>A</MudChip>
                        <MudChip Color="Color.Primary" Variant="Variant.Text" Value=@("Pts")>P</MudChip>
                        <MudChip Color="Color.Primary" Variant="Variant.Text" Value=@("Fan. Pts")>Fan. Pts</MudChip>
                    </MudChipSet>
                </MudStack>

                @foreach (var player in filteredPlayers.Where(x => allAvailablePlayers.Contains(x)))
                {
                    <MudStack Class="my-2" Row="true" AlignItems="AlignItems.Center">
                        @if (playerToConfirm is not null && playerToConfirm.Equals(player))
                        {
                            <MudButton Disabled="!isCurrentPick" OnClick="() => ConfirmDraft(player)" Color="Color.Success" Variant="Variant.Filled">Confirm</MudButton>
                        }
                        else
                        {
                            <MudButton Disabled="!isCurrentPick" OnClick="() => InitiateDraft(player)" Color="Color.Primary" Variant="Variant.Filled">Draft</MudButton>
                        }

                        <MudStack @onclick=@(() => RowClicked(player))>
                            <MudText><b>@($"{player.FirstName} {player.LastName}")</b></MudText>
                            <MudText Typo="Typo.body2">@player.FullPosition &nbsp; @player.Flag</MudText>
                        </MudStack>
                        
                        <MudSpacer />

                        <MudText>
                            <b>@ScoreCalculator.CalculatePlayerSeasonScore(player).ToString("F2")</b>
                        </MudText>
                    </MudStack>

                    <MudDivider/>
                }
            </MudTabPanel>
            <MudTabPanel Text="Draft Board">
                
                <br />
                
                <MudGrid Class="px-2">
                    @foreach (var player in allPlayers.Where(x => !allAvailablePlayers.Contains(x)).OrderBy(x => x.DraftNumber))
                    {
                        <MudItem xs="6" Class="pa-1">
                            <MudPaper Class=@($"{PlayerCardClass(player.Position)} pa-1") Height="90px" @onclick=@(() => RowClicked(player))>
                                <div class="d-flex justify-space-between align-center">
                                    <MudText Typo="Typo.caption">@player.Position - @teams.Where(x => x.Id == player.UserId).FirstOrDefault().TeamName</MudText>
                                    <MudText Typo="Typo.caption">@player.DraftNumber</MudText>
                                </div>
                                <MudText Typo="Typo.body1"><b>@($"{player.FirstName} {player.LastName}")</b></MudText>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    }
</MudPaper>

<PlayerOverlay @bind-Visible="_playerOverlayVisible" PlayerInfo="overlayPlayer" />

<GoalieOverlay @bind-Visible="_goalieOverlayVisible" PlayerInfo="overlayPlayer" />

@code {
    private HubConnection? hubConnection;
    private bool isConnected => hubConnection is not null && hubConnection.State == HubConnectionState.Connected;
    
    private IEnumerable<Data.FNFPlayer>? allPlayers;
    private IEnumerable<Data.FNFPlayer>? allAvailablePlayers => allPlayers?.Where(x => x.UserId is null);
    private IEnumerable<Data.FNFPlayer>? filteredPlayers;
    private IEnumerable<Data.User> teams;

    private Data.User? currentUserPick;
    private int currentPick = 0;

    private bool isCurrentPick => currentUserPick is not null && currentUserPick.Id == CustomAuthenticationStateProvider.CurrentUser.Id;
    
    private bool _playerOverlayVisible
    {
        get => playerOverlayVisible;
        set
        {
            playerOverlayVisible = value;
            if (!playerOverlayVisible)
            {
                overlayPlayer = null;
            }
            else
            {
                _goalieOverlayVisible = false;
            }
        }
    }
    private bool playerOverlayVisible = false;    
    
    private bool _goalieOverlayVisible
    {
        get => goalieOverlayVisible;
        set
        {
            goalieOverlayVisible = value;
            if (!goalieOverlayVisible)
            {
                overlayPlayer = null;
            }
            else
            {
                _playerOverlayVisible = false;
            }
        }
    }
    private bool goalieOverlayVisible = false;
    
    private Data.FNFPlayer? overlayPlayer;

    private string _selectedNationality
    {
        get => selectedNationality;
        set
        {
            selectedNationality = value;
            ApplyFilters();
        }
    }
    private string selectedNationality = "All";
    
    private string _selectedPositionFilter
    {
        get => selectedPositionFilter;
        set
        {
            selectedPositionFilter = value;
            ApplyFilters();
        }
    }
    private string selectedPositionFilter = "All";

    private string _selectedSortKey
    {
        get => selectedSortKey;
        set
        {
            selectedSortKey = value;
            ApplyFilters();
        }
    }

    private string selectedSortKey = "Fan. Pts";
    
    private string searchString;
    private string _searchString
    {
        get => searchString;
        set
        {
            searchString = value;
            ApplyFilters();
        }
    }

    private Data.FNFPlayer? playerToConfirm;
    
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CustomAuthenticationStateProvider.CurrentUser.Email))
        {
            Navigation.NavigateTo("/");
        }
        (currentPick, currentUserPick) = await FNFData.GetCurrentDraftPickTeamAsync();
        allPlayers = await FNFData.GetAllPlayersAsync();
        filteredPlayers = allPlayers.OrderBy(x => ScoreCalculator.CalculatePlayerSeasonScore(x)).Reverse();
        
        teams = await FNFData.GetAllUsersAsync();

        await initializeHubConnection();
    }

    private void InitiateDraft(Data.FNFPlayer player)
    {
        playerToConfirm = player;
    }

    private async Task ConfirmDraft(Data.FNFPlayer player)
    {
        if (!string.IsNullOrEmpty(CustomAuthenticationStateProvider.CurrentUser.Email) && CustomAuthenticationStateProvider.CurrentUser.Id == currentUserPick.Id)
        {
            await FNFData.DraftPlayerAsync(player, CustomAuthenticationStateProvider.CurrentUser);

            if (isConnected)
            {
                await hubConnection.SendAsync("DraftPlayer", player, CustomAuthenticationStateProvider.CurrentUser);
            }
        }

        playerToConfirm = null;
    }

    private async Task RowClicked(Data.FNFPlayer player)
    {
        overlayPlayer = player;
        if (player.Position == "G")
        {
            goalieOverlayVisible = true;
        }
        else
        {
            playerOverlayVisible = true;
        }
    }

    private Func<Data.FNFPlayer, bool> quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void ApplyFilters()
    {
        filteredPlayers = allPlayers;
        
        if (selectedPositionFilter != "All")
        {
            filteredPlayers = filteredPlayers.Where(p => p.Position == selectedPositionFilter);
        }
        
        if (selectedNationality != "All")
        {
            filteredPlayers = filteredPlayers.Where(p => p.Nationality == selectedNationality);
        }
        
        filteredPlayers = filteredPlayers.Where(quickFilter);

        filteredPlayers = filteredPlayers.OrderBy(x =>
            {
                
                switch (_selectedSortKey)
                {
                    case "G":
                        return x.Goals;
                    case "A":
                        return x.Assists;
                    case "Pts":
                        return x.Goals + x.Assists;
                    case "Fan. Pts":
                    default:
                        return ScoreCalculator.CalculatePlayerSeasonScore(x);
                }
        })
        .Reverse();
    }

    private string PlayerCardClass(string position)
    {
        return position switch
        {
            "F" => "mud-theme-primary",
            "D" => "mud-theme-secondary",
            "G" => "mud-theme-tertiary",
            _ => "mud-theme-info"
        };
    }

    private async Task initializeHubConnection()
    {
        string hubUrl = Navigation.BaseUri.TrimEnd('/') + Hubs.DraftHub.HubUrl;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .Build();

        hubConnection.On<Data.FNFPlayer, Data.User>("DraftPlayer", async (player, user) =>
        {
            (currentPick, currentUserPick) = await FNFData.GetCurrentDraftPickTeamAsync();

            allPlayers = allPlayers.Select(p =>
            {
                if (p.Equals(player))
                {
                    p.UserId = user.Id;
                    p.DraftNumber = currentPick - 1;
                }
                return p;
            });
            filteredPlayers = allPlayers;
            
            InvokeAsync(StateHasChanged);
        });
            
        await hubConnection.StartAsync();
    }
}


