@page "/players"

@inject Data.IFNFData FNFData
@inject Data.CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Players</PageTitle>

<div class="d-flex flex-column align-center ma-4">
    <MudChipSet Class="my-4" T="string" @bind-SelectedValue="_currentNationality" SelectionMode="SelectionMode.SingleSelection">
        <MudChip Color="Color.Primary" Variant="Variant.Text" Value=@(string.Empty) Text="ALL">
            <AvatarContent>
                <MudAvatar>
                    <MudImage Class="my-4" Height="30" Width="25" Src="https://upload.wikimedia.org/wikipedia/sco/thumb/3/3a/05_NHL_Shield.svg/1200px-05_NHL_Shield.svg.png" />
                </MudAvatar>
            </AvatarContent>
        </MudChip>
        <MudChip Color="Color.Error" Variant="Variant.Text" Value=@("CAN")>
            <AvatarContent>
                <MudAvatar>
                    <MudImage Class="my-4" Height="30" Width="30" Src="CAN-logo.svg" />
                </MudAvatar>
            </AvatarContent>
        </MudChip>
        <MudChip Color="Color.Info" Variant="Variant.Text" Value=@("USA")>
            <AvatarContent>
                <MudAvatar>
                    <MudImage Class="my-4" Height="30" Width="30" Src="USA-logo.svg" />
                </MudAvatar>
            </AvatarContent>
        </MudChip>
        <MudChip Color="Color.Warning" Variant="Variant.Text" Value=@("SWE")>
            <AvatarContent>
                <MudAvatar>
                    <MudImage Class="my-4" Height="30" Width="30" Src="SWE-logo.svg" />
                </MudAvatar>
            </AvatarContent>
        </MudChip>
        <MudChip Color="Color.Surface" Variant="Variant.Text" Value=@("FIN")>
            <AvatarContent>
                <MudAvatar>
                    <MudImage Class="my-4" Height="30" Width="30" Src="FIN-logo.svg" />
                </MudAvatar>
            </AvatarContent>
        </MudChip>
    </MudChipSet>
    <MudStack Row="true" AlignItems="AlignItems.Center">
        <MudFab Color="@(currentPosition == null ? Color.Primary : Color.Default)"
                OnClick="@(() => FilterByPosition(null))" Label="All" />
        <MudFab Color="@(currentPosition == "F" ? Color.Primary : Color.Default)"
                OnClick="@(() => FilterByPosition("F"))" Label="F" />
        <MudFab Color="@(currentPosition == "D" ? Color.Primary : Color.Default)"
                OnClick="@(() => FilterByPosition("D"))" Label="D" />
        <MudFab Color="@(currentPosition == "G" ? Color.Primary : Color.Default)"
                OnClick="@(() => FilterByPosition("G"))" Label="G" />
    </MudStack>
</div>

@if (filteredPlayers is not null)
{
    <MudGrid Spacing="0">
        @foreach(var player in filteredPlayers)
        {
            <MudItem xs="0" sm="2"></MudItem>
            <MudItem xs="12" sm="8">
                @if (player.position == "G")
                {
                    <GoaliePointCard Player="player" />            
                }
                else
                {
                    <PlayerPointCard Player="player" />
                }
            </MudItem>
            <MudItem xs="0" sm="2"></MudItem>
        }
    </MudGrid>
}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}

@code {
    private IEnumerable<Data.FNFPlayer> allPlayers;
    private IEnumerable<Data.FNFPlayer> filteredPlayers;

    private string _currentNationality
    {
        get => currentNationality;
        set
        {
            currentNationality = value;
            ApplyFilters();
        }
    }
    private string currentNationality = string.Empty;
    private string currentPosition;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CustomAuthenticationStateProvider.CurrentUser.email))
        {
            Navigation.NavigateTo("/");
        }
        allPlayers = await FNFData.GetAllPlayersAsync();
        filteredPlayers = allPlayers;
    }

    private void FilterByNationality(string nationality)
    {
        currentNationality = nationality;
        ApplyFilters();
    }

    private void FilterByPosition(string position)
    {
        currentPosition = position;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredPlayers = allPlayers;

        if (!string.IsNullOrEmpty(currentNationality))
        {
            filteredPlayers = filteredPlayers.Where(p => p.nationality == currentNationality);
        }

        if (!string.IsNullOrEmpty(currentPosition))
        {
            filteredPlayers = filteredPlayers.Where(p => p.position == currentPosition);
        }
    }
}

