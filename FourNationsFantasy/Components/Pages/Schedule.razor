@page "/schedule"

@inject NavigationManager Navigation
@inject Nhl.Api.INhlApi NhlApi


<MudContainer MaxWidth="MaxWidth.Medium" Class="py-8">
    @if (fnSchedule is not null)
    {
        <MudStack Spacing="4">
            @foreach (var day in fnSchedule.GameWeek)
            {
                @if (day.Games.Count() > 0)
                {
                    <MudText><b>@(DateTime.Parse(day.Date).ToString("dddd, MMMM dd"))</b></MudText>
                }
                @foreach (var game in day.Games)
                {
                    <MudPaper Class="pa-6" Style="background-color: rgba(255,255,255,0.1); max-width: 100%;">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="4">
                                    <MudStack AlignItems="AlignItems.Center">
                                        <span class="flag-emoji" style="font-size: 32px;">@GetFlagEmoji(game.AwayTeam.Abbrev)</span>
                                        <MudText Color="Color.Surface" Style="font-size: 18px;">0</MudText>
                                    </MudStack>
                                    <MudText Color="Color.Surface" Class="mx-2">vs</MudText>
                                    <MudStack AlignItems="AlignItems.Center">
                                        <span class="flag-emoji" style="font-size: 32px;">@GetFlagEmoji(game.HomeTeam.Abbrev)</span>
                                        <MudText Color="Color.Surface" Style="font-size: 18px;">0</MudText>
                                    </MudStack>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="6">
                                <MudStack AlignItems="AlignItems.End" Spacing="2">
                                    <MudText Color="Color.Surface">@game.StartTimeUTC.AddHours(-5).ToString("hh:mm tt")</MudText>
                                    <MudText Color="Color.Surface">@game.Venue.Default</MudText>
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            }
        </MudStack>
    }

</MudContainer>

@code {
    private Nhl.Api.Models.Schedule.LeagueSchedule? fnSchedule;

    protected override async Task OnInitializedAsync()
    {
        fnSchedule = await NhlApi.GetLeagueWeekScheduleByDateAsync(new DateOnly(2025, 02, 12));

        // add rest of tournament to fnSchedule
        var secondWeek = await NhlApi.GetLeagueWeekScheduleByDateAsync(new DateOnly(2025, 02, 19));
        fnSchedule.GameWeek.AddRange(secondWeek.GameWeek.Take(2));
    }

    private string GetFlagEmoji(string teamCode)
    {
        return teamCode.ToUpper() switch
        {
            "CAN" => "üá®üá¶",
            "USA" => "üá∫üá∏",
            "SWE" => "üá∏üá™",
            "FIN" => "üá´üáÆ",
            _ => "üè≥Ô∏è"
        };
    }

    private string FormatTime(TimeSpan time)
    {
        int hour = time.Hours % 12;
        if (hour == 0) hour = 12;
        string amPm = time.Hours < 12 ? "am" : "pm";
        return $"{hour}:{time.Minutes:D2} {amPm}";
    }

    public class ScheduleItem
    {
        public string Team1 { get; set; }
        public string Team2 { get; set; }
        public DateTime Date { get; set; }
        public TimeSpan Time { get; set; }
        public string Location { get; set; }
    }
}

