@page "/roster"
@page "/roster/{userId:int}"

@inject Data.IFNFData FNFData
@inject Data.CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject Data.ScoreCalculationService ScoreCalculator
@inject NavigationManager Navigation

<PageTitle>Roster</PageTitle>

@if (user is not null)
{
    <MudStack Class="mb-4">
        <MudText Typo="Typo.h4" HtmlTag="i"><b>@user.teamname</b></MudText>
        <MudText Typo="Typo.h6" Color=@(rank == 1 ? Color.Warning : Color.Secondary)>@rankStr</MudText>
    </MudStack>
}

@if (userRoster is not null)
{
    <div class="mx-sm-20">
        <MudText>Forwards</MudText>
        @foreach (var player in userRoster.Where(p => p.position == "F"))
        {
            <PlayerPointCard Player="@player" />
        }    
    </div>
    
    <br />
    
    <div class="mx-sm-20">
        <MudText>Defensemen</MudText>
        @foreach (var player in userRoster.Where(p => p.position == "D"))
        {
            <PlayerPointCard Player="@player" />
        }    
    </div>
    
    <br />

    <div class="mx-sm-20">
        <MudText>Goalies</MudText>
        @foreach (var player in userRoster.Where(p => p.position == "G"))
        {
            <GoaliePointCard Player="@player" />
        }
    </div>
}

@code {
    
    [Parameter]
    public int? userId { get; set; }

    private Data.User? user;
    private IEnumerable<Data.FNFPlayer>? userRoster;
    private int rank = -1;
    private string rankStr => rank switch
    {
        -1 => string.Empty,
        0 => string.Empty,
        1 => "1st place",
        2 => "2nd place",
        3 => "3rd place",
        _ => $"{rank}th place"
    };

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(CustomAuthenticationStateProvider.CurrentUser.email))
        {
            Navigation.NavigateTo("/");
        }

        if (userId is null)
        {
            user = CustomAuthenticationStateProvider.CurrentUser;
        }
        else
        {
            user = await FNFData.GetUserByIdAsync(userId.Value);
        }
        
        
        if (user is not null)
        {
            userRoster = await FNFData.GetRosterAsync(user.id);
        }
        
        var rankings = ScoreCalculator.GetFantasyTeamRanking(await FNFData.GetAllPlayersAsync());
        rank = rankings.FirstOrDefault(x => x.Item2 == user.id).Item1;
        
    }
}