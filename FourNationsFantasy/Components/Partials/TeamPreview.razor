@inject Data.ScoreCalculationService ScoreCalculator
@inject Data.IFNFData FNFData

@if (User is not null)
{
    <a href=@($"roster/{User.id}")>
        <MudPaper Class="pa-3 mud-theme-surface" Elevation="3">
            <MudStack Style="min-height: 100px" Row="true" AlignItems="AlignItems.Center">
                <MudAvatar Color="Color.Primary">@User.teamname.First()</MudAvatar>
                <MudText Typo="Typo.subtitle2">@User.teamname</MudText>
            </MudStack>
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.SpaceEvenly">
                @if (userRoster is not null)
                {
                    <MudText Typo="Typo.body2">@UserGamesPlayed/45 games played</MudText>
                    <MudText Typo="Typo.body2">@(UserFantasyPoints.ToString("F2")) points</MudText>
                }
                else
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="20px" Width="100px" />
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="20px" Width="100px" />
                }
            </MudStack>
        </MudPaper>
    </a>
}


@code {
    [Parameter] 
    public Data.User? User { get; set; }

    private IEnumerable<Data.FNFPlayer>? userRoster;

    // TODO:
    private int UserGamesPlayed => userRoster?.Sum(p => p.fn_games_played) ?? 0;
    //
    
    private double UserFantasyPoints => userRoster?.Sum(p => ScoreCalculator.CalculatePlayerTournamentScore(p)) ?? 0;
    
    protected override async Task OnInitializedAsync()
    {
        if (User?.id is not null)
        {
            userRoster = await FNFData.GetRosterAsync(User.id);
        }
    }
}
