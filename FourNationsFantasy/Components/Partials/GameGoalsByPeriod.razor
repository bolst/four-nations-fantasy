@inject Nhl.Api.INhlApi NhlApi

@if (Game is not null && boxScore is not null)
{
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudText>@Game.AwayTeam.Abbrev</MudText>
        
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText>@GetGamePeriodScore(1).Item1</MudText>
            <MudText>@GetGamePeriodScore(2).Item1</MudText>
            <MudText>@GetGamePeriodScore(3).Item1</MudText>
        </MudStack>        
    </MudStack>    
    
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudText>@Game.HomeTeam.Abbrev</MudText>
        
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText>@GetGamePeriodScore(1).Item2</MudText>
            <MudText>@GetGamePeriodScore(2).Item2</MudText>
            <MudText>@GetGamePeriodScore(3).Item2</MudText>
        </MudStack>        
    </MudStack>
}

@code {
    
    [Parameter]
    public Nhl.Api.Models.Schedule.Game? Game { get; set; }

    private bool IsLiveOrComplete => Game?.GameState != "OFF";

    private Nhl.Api.Models.Game.GameCenterBoxScore? boxScore;

    private (string, string) GetGamePeriodScore(int period)
    {
        if (boxScore is null) return ("-", "-");

        if (boxScore.Boxscore.Linescore is not null && boxScore.Boxscore.Linescore.ByPeriod.Any(p => p.PeriodDescriptor.Number == period))
        {
            var periodScore = boxScore.Boxscore.Linescore.ByPeriod.First(p => p.PeriodDescriptor.Number == period);
            return (periodScore.Away.ToString(), periodScore.Home.ToString());
        }
        
        return ("-", "-");
    }

    protected override async Task OnInitializedAsync()
    {
        if (Game is not null)
        {
            boxScore = await NhlApi.GetGameCenterBoxScoreByGameIdAsync(Game.Id);
        }
    }

}