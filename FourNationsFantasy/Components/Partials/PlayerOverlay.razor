@using Nhl.Api.Enumerations.Game
@inject Nhl.Api.INhlApi NhlApi

    
<MudOverlay Visible="@Visible" VisibleChanged="OnVisibleChanged" DarkBackground LockScroll>
    <MudPaper Class="py-4" Style="height: 70vh; width: 95vw;">
        @if (PlayerInfo is not null)
        {
            <div style="width: 100%" class="d-flex justify-end">
                <MudIconButton OnClick="() => { Visible = false; }" Class="ma-1" Icon="@Icons.Material.Filled.Close" Color="Color.Error" Size="Size.Small" />
            </div>
            <MudSwipeArea OnSwipeEnd="@((e) => OnSwipe(e))">
                <MudStack Class="px-4" Row="true" AlignItems="AlignItems.Center">
                    <MudImage Src="@PlayerInfo.Headshot" Width="150"/>
                    <MudStack Style="width: 100%">
                        <MudText Typo="Typo.h6">@PlayerInfo.FullName</MudText>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceAround">

                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.caption">GP</MudText>
                                <MudText Typo="Typo.h6"><b>@PlayerInfo.SeasonTotals.Last().GamesPlayed</b></MudText>
                            </MudStack>

                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.caption">G</MudText>
                                <MudText Typo="Typo.h6"><b>@PlayerInfo.SeasonTotals.Last().Goals</b></MudText>
                            </MudStack>

                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.caption">A</MudText>
                                <MudText Typo="Typo.h6"><b>@PlayerInfo.SeasonTotals.Last().Assists</b></MudText>
                            </MudStack>

                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.caption">P</MudText>
                                <MudText Typo="Typo.h6"><b>@PlayerInfo.SeasonTotals.Last().Points</b></MudText>
                            </MudStack>

                        </MudStack>
                        
                    </MudStack>
                </MudStack>
            </MudSwipeArea>
        <MudPaper Class="my-n2 relative mud-theme-dark">
            <MudTabs Centered>
                <MudTabPanel Text="4 Nations">
                    @if (playerGameLog is not null)
                    {
                        @* <PlayerGameLog GameLogs="playerGameLog"/> *@
                    }
                </MudTabPanel>                
                <MudTabPanel Text="Reg. Season">
                    @if (playerGameLog is not null)
                    {
                        <PlayerGameLog GameLogs="playerGameLog"/>
                    }
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
        }
    </MudPaper>
</MudOverlay>

@code {
    
    [Parameter]
    public bool Visible { get; set; }
    
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public Nhl.Api.Models.Player.PlayerProfile? PlayerInfo { get; set; }

    private Nhl.Api.Models.Game.PlayerSeasonGameLog? playerGameLog;

    private async Task OnVisibleChanged()
    {
        await VisibleChanged.InvokeAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PlayerInfo is not null)
        {
            playerGameLog = await NhlApi.GetPlayerSeasonGameLogsBySeasonAndGameTypeAsync(PlayerInfo.PlayerId, "20242025", GameType.RegularSeason);
        }
    }

    private void OnSwipe(SwipeEventArgs swipeArgs)
    {
        if (swipeArgs.SwipeDirection == SwipeDirection.TopToBottom)
        {
            Visible = false;
        }
    }
}