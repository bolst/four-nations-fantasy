@using Nhl.Api.Enumerations.Game
@inject Nhl.Api.INhlApi NhlApi

    
<MudOverlay Visible="@Visible" VisibleChanged="OnVisibleChanged" DarkBackground LockScroll>
    <MudPaper Class="pb-4" Style="height: 70vh; width: 95vw; max-width: 500px;">
        @if (PlayerInfo is not null)
        {
            <div style="@backgroundCss(PlayerInfo)">
                <div style="width: 100%" class="d-flex justify-end">
                    <MudIconButton OnClick=@( async () => await OnVisibleChanged(false) ) Class="ma-1" Icon="@Icons.Material.Filled.Close" Color="Color.Error" Size="Size.Small" />
                </div>
                <MudSwipeArea OnSwipeEnd="@((e) => OnSwipe(e))">
                    <MudStack Class="px-4" Row="true" AlignItems="AlignItems.Center">
                        <MudImage Src="@PlayerInfo.Headshot" Width="150"/>
                        <MudStack Style="width: 100%">
                            <MudText Typo="Typo.h6">@PlayerInfo.FirstName @PlayerInfo.LastName</MudText>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceAround">

                                <MudStack AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.caption">GP</MudText>
                                    <MudText Typo="Typo.h6"><b>@PlayerInfo.GamesPlayed</b></MudText>
                                </MudStack>

                                <MudStack AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.caption">G</MudText>
                                    <MudText Typo="Typo.h6"><b>@PlayerInfo.Goals</b></MudText>
                                </MudStack>

                                <MudStack AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.caption">A</MudText>
                                    <MudText Typo="Typo.h6"><b>@PlayerInfo.Assists</b></MudText>
                                </MudStack>

                                <MudStack AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.caption">P</MudText>
                                    <MudText Typo="Typo.h6"><b>@PlayerInfo.Points</b></MudText>
                                </MudStack>

                            </MudStack>
                            
                        </MudStack>
                    </MudStack>
                </MudSwipeArea>
            </div>
            
        <MudPaper Class="my-n2 relative mud-theme-dark">
            <MudTabs Centered>
                <MudTabPanel Text="4 Nations">
                    @if (playerGameLog is not null)
                    {
                        @* <PlayerGameLog GameLogs="playerGameLog"/> *@
                    }
                </MudTabPanel>                
                <MudTabPanel Text="Reg. Season">
                    @if (playerGameLog is not null)
                    {
                        <PlayerGameLog GameLogs="playerGameLog"/>
                    }
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
        }
    </MudPaper>
</MudOverlay>

@code {
    
    [Parameter]
    public bool Visible { get; set; }
    
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public Data.FNFPlayer? PlayerInfo { get; set; }

    private Nhl.Api.Models.Game.PlayerSeasonGameLog? playerGameLog;

    private string backgroundCss(Data.FNFPlayer player) => $"background: linear-gradient( rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7) ), url({player.HeroImage}); background-size: 100% auto;";

    private async Task OnVisibleChanged(bool visible)
    {
        Visible = visible;
        await VisibleChanged.InvokeAsync(visible);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PlayerInfo is not null)
        {
            playerGameLog = await NhlApi.GetPlayerSeasonGameLogsBySeasonAndGameTypeAsync(PlayerInfo.NhlIdInt, "20242025", GameType.RegularSeason);
        }
    }

    private async Task OnSwipe(SwipeEventArgs swipeArgs)
    {
        if (swipeArgs.SwipeDirection == SwipeDirection.TopToBottom)
        {
            Visible = false;
            await VisibleChanged.InvokeAsync(Visible);
        }
    }
}